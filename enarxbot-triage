#!/usr/bin/python3
# SPDX-License-Identifier: Apache-2.0

import bot

import json
import sys
import os

if os.environ["GITHUB_EVENT_NAME"] not in ["pull_request_target", "issues"]:
    sys.exit(0)

owner, repo = os.environ["GITHUB_REPOSITORY"].split("/")

with open(os.environ["GITHUB_EVENT_PATH"]) as f:
    event = json.load(f)

if event["action"] not in {"opened", "reopened"}:
    sys.exit(0)

id = event.get('pull_request', event.get('issue'))
id = id['node_id']

# Find out what projects the issue/PR is in.
try:
    result = bot.graphql(
        """
        query($id:ID!, $cursor:String) {
            node(id:$id) {
                ... on PullRequest {
                    number
                    projectCards(first:100, archivedStates:NOT_ARCHIVED, after:$cursor) {
                        pageInfo { endCursor hasNextPage }
                        nodes {
                            id
                            column {
                                id
                                name
                                project {
                                    id
                                    name
                                }
                            }
                        }
                    }
                }
                ... on Issue {
                    number
                    projectCards(first:100, archivedStates:NOT_ARCHIVED, after:$cursor) {
                        pageInfo { endCursor hasNextPage }
                        nodes {
                            id
                            column {
                                id
                                name
                                project {
                                    id
                                    name
                                }
                            }
                        }
                    }
                }
            }
        }
        """,
        id=id,
        cursors={
            'cursor': ["node", "projectCards"]
        },
    )
except bot.TokenError as e:
    print(e.error)
    sys.exit(0)

cards = result["node"]["projectCards"]["nodes"]
projects = {card["column"]["project"]["id"] for card in cards}

# If the issue/PR isn't in the Planning project, add it to Triage.
if bot.PROJECTS["Planning"] not in projects:
    # Print status.
    print(f"Adding {owner}/{repo}#{result['node']['number']} to Planning board")

    # Add the content to the project.
    bot.graphql(
        """
        mutation($input:AddProjectCardInput!) {
            addProjectCard(input:$input) {
                clientMutationId
            }
        }
        """,
        input={
            "projectColumnId": bot.COLUMNS["Planning"]["Triage"],
            "contentId": id
        }
    )
